Devise a way to find an element in a rotated sorted array in O(log n) time.
Complexity- O(Logn)

#include<iostream>
using namespace std;

int binsrch(int ar[],int start, int last, int x)
{
    int mid;
	int f=0;
 
	while((last>=start)&&(f!=1))
    {
    	mid=(last+start)/2;
	    if(ar[mid]==x)
	      {
	      	f=1;
      	    return mid;
      	    
		  }
        else if(ar[mid]>x)
		{
			last=mid-1;
	    }
		else 
		   start=mid+1;  		
   	}
	   if(f==0)
	   {
	   	return -1;
		}	
}

int main()
{   int n,i,min,index=0,f=0;
	int ele;
	cout<<"\n Enter number of elements in array: ";
	cin>>n;
	int ar[n];
	cout<<"\n Enter the rotated sorted array: ";
	for(i=0;i<n;i++)
	{
		cin>>ar[i];
	}
	min=ar[0];
	for(i=0;i<n;i++)
	{
		if(ar[i]<min)
		{
		  min=ar[i];
		  index=i;
		  break;
		}
	}
 
 	cout<<"\n Enter element to be searched: ";
	cin>>ele;
 
			
	 if((ele<min)||(ele>ar[index-1]))
	 {
	 cout<<"\n Not found";
	 return 0;
	 }
         if(ele<ar[0])
		 {
		  
		 f=binsrch(ar,index,n,ele);
		 if(f!=-1)
		 {
		 	cout<<"Found at: "<<f-index;
		 }
			 else
		        cout<<"\n Not Found";
	     }
		 
			 else if(ele>ar[0])
			 {
			 
		 f= binsrch(ar,0,index-1,ele);
	  
		 if(f!=-1)
			 {
			 	cout<<"Found at: "<<(n-index+f);
			 }
				 else
				  cout<<"\n Not Found";
			}
	return 0;
}
